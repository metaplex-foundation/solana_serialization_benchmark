// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::state_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum BasicTypesOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BasicTypes<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BasicTypes<'a> {
  type Inner = BasicTypes<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BasicTypes<'a> {
  pub const VT_UNSIGNED8: flatbuffers::VOffsetT = 4;
  pub const VT_UNSIGNED16: flatbuffers::VOffsetT = 6;
  pub const VT_UNSIGNED32: flatbuffers::VOffsetT = 8;
  pub const VT_UNSIGNED64: flatbuffers::VOffsetT = 10;
  pub const VT_PUBLIC_KEY: flatbuffers::VOffsetT = 12;
  pub const VT_STRING: flatbuffers::VOffsetT = 14;
  pub const VT_EXAMPLE_STRUCT: flatbuffers::VOffsetT = 16;
  pub const VT_EXAMPLE_ENUM: flatbuffers::VOffsetT = 18;
  pub const VT_EXAMPLE_VARIANT_TYPE: flatbuffers::VOffsetT = 20;
  pub const VT_EXAMPLE_VARIANT: flatbuffers::VOffsetT = 22;
  pub const VT_ARRAY8: flatbuffers::VOffsetT = 24;
  pub const VT_ARRAY16: flatbuffers::VOffsetT = 26;
  pub const VT_ARRAY32: flatbuffers::VOffsetT = 28;
  pub const VT_ARRAY64: flatbuffers::VOffsetT = 30;
  pub const VT_ARRAY_PUBLIC_KEY: flatbuffers::VOffsetT = 32;
  pub const VT_ARRAY_STRING: flatbuffers::VOffsetT = 34;
  pub const VT_ARRAY_EXAMPLE_STRUCT: flatbuffers::VOffsetT = 36;
  pub const VT_ARRAY_EXAMPLE_ENUM: flatbuffers::VOffsetT = 38;
  pub const VT_ARRAY_EXAMPLE_VARIANT1_TYPE: flatbuffers::VOffsetT = 40;
  pub const VT_ARRAY_EXAMPLE_VARIANT1: flatbuffers::VOffsetT = 42;
  pub const VT_ARRAY_EXAMPLE_VARIANT2_TYPE: flatbuffers::VOffsetT = 44;
  pub const VT_ARRAY_EXAMPLE_VARIANT2: flatbuffers::VOffsetT = 46;
  pub const VT_ARRAY_EXAMPLE_VARIANT3_TYPE: flatbuffers::VOffsetT = 48;
  pub const VT_ARRAY_EXAMPLE_VARIANT3: flatbuffers::VOffsetT = 50;
  pub const VT_ARRAY_EXAMPLE_VARIANT4_TYPE: flatbuffers::VOffsetT = 52;
  pub const VT_ARRAY_EXAMPLE_VARIANT4: flatbuffers::VOffsetT = 54;
  pub const VT_ARRAY_EXAMPLE_VARIANT5_TYPE: flatbuffers::VOffsetT = 56;
  pub const VT_ARRAY_EXAMPLE_VARIANT5: flatbuffers::VOffsetT = 58;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BasicTypes { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BasicTypesArgs<'args>
  ) -> flatbuffers::WIPOffset<BasicTypes<'bldr>> {
    let mut builder = BasicTypesBuilder::new(_fbb);
    builder.add_unsigned64(args.unsigned64);
    if let Some(x) = args.array_example_variant5 { builder.add_array_example_variant5(x); }
    if let Some(x) = args.array_example_variant4 { builder.add_array_example_variant4(x); }
    if let Some(x) = args.array_example_variant3 { builder.add_array_example_variant3(x); }
    if let Some(x) = args.array_example_variant2 { builder.add_array_example_variant2(x); }
    if let Some(x) = args.array_example_variant1 { builder.add_array_example_variant1(x); }
    if let Some(x) = args.array_example_enum { builder.add_array_example_enum(x); }
    if let Some(x) = args.array_example_struct { builder.add_array_example_struct(x); }
    if let Some(x) = args.array_string { builder.add_array_string(x); }
    if let Some(x) = args.array_public_key { builder.add_array_public_key(x); }
    if let Some(x) = args.array64 { builder.add_array64(x); }
    if let Some(x) = args.array32 { builder.add_array32(x); }
    if let Some(x) = args.array16 { builder.add_array16(x); }
    if let Some(x) = args.array8 { builder.add_array8(x); }
    if let Some(x) = args.example_variant { builder.add_example_variant(x); }
    if let Some(x) = args.example_struct { builder.add_example_struct(x); }
    if let Some(x) = args.string { builder.add_string(x); }
    if let Some(x) = args.public_key { builder.add_public_key(x); }
    builder.add_unsigned32(args.unsigned32);
    builder.add_unsigned16(args.unsigned16);
    builder.add_array_example_variant5_type(args.array_example_variant5_type);
    builder.add_array_example_variant4_type(args.array_example_variant4_type);
    builder.add_array_example_variant3_type(args.array_example_variant3_type);
    builder.add_array_example_variant2_type(args.array_example_variant2_type);
    builder.add_array_example_variant1_type(args.array_example_variant1_type);
    builder.add_example_variant_type(args.example_variant_type);
    builder.add_example_enum(args.example_enum);
    builder.add_unsigned8(args.unsigned8);
    builder.finish()
  }

  pub fn unpack(&self) -> BasicTypesT {
    let unsigned8 = self.unsigned8();
    let unsigned16 = self.unsigned16();
    let unsigned32 = self.unsigned32();
    let unsigned64 = self.unsigned64();
    let public_key = self.public_key().map(|x| {
      x.unpack()
    });
    let string = self.string().map(|x| {
      x.to_string()
    });
    let example_struct = self.example_struct().map(|x| {
      Box::new(x.unpack())
    });
    let example_enum = self.example_enum();
    let example_variant = match self.example_variant_type() {
      ExampleVariant::NONE => ExampleVariantT::NONE,
      ExampleVariant::Zero => ExampleVariantT::Zero(Box::new(
        self.example_variant_as_zero()
            .expect("Invalid union table, expected `ExampleVariant::Zero`.")
            .unpack()
      )),
      ExampleVariant::One => ExampleVariantT::One(Box::new(
        self.example_variant_as_one()
            .expect("Invalid union table, expected `ExampleVariant::One`.")
            .unpack()
      )),
      ExampleVariant::Two => ExampleVariantT::Two(Box::new(
        self.example_variant_as_two()
            .expect("Invalid union table, expected `ExampleVariant::Two`.")
            .unpack()
      )),
      ExampleVariant::Three => ExampleVariantT::Three(Box::new(
        self.example_variant_as_three()
            .expect("Invalid union table, expected `ExampleVariant::Three`.")
            .unpack()
      )),
      ExampleVariant::Four => ExampleVariantT::Four(Box::new(
        self.example_variant_as_four()
            .expect("Invalid union table, expected `ExampleVariant::Four`.")
            .unpack()
      )),
      _ => ExampleVariantT::NONE,
    };
    let array8 = self.array8().map(|x| {
      x.into_iter().collect()
    });
    let array16 = self.array16().map(|x| {
      x.into_iter().collect()
    });
    let array32 = self.array32().map(|x| {
      x.into_iter().collect()
    });
    let array64 = self.array64().map(|x| {
      x.into_iter().collect()
    });
    let array_public_key = self.array_public_key().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    let array_string = self.array_string().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let array_example_struct = self.array_example_struct().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    let array_example_enum = self.array_example_enum().map(|x| {
      x.into_iter().collect()
    });
    let array_example_variant1 = match self.array_example_variant1_type() {
      ExampleVariant::NONE => ExampleVariantT::NONE,
      ExampleVariant::Zero => ExampleVariantT::Zero(Box::new(
        self.array_example_variant1_as_zero()
            .expect("Invalid union table, expected `ExampleVariant::Zero`.")
            .unpack()
      )),
      ExampleVariant::One => ExampleVariantT::One(Box::new(
        self.array_example_variant1_as_one()
            .expect("Invalid union table, expected `ExampleVariant::One`.")
            .unpack()
      )),
      ExampleVariant::Two => ExampleVariantT::Two(Box::new(
        self.array_example_variant1_as_two()
            .expect("Invalid union table, expected `ExampleVariant::Two`.")
            .unpack()
      )),
      ExampleVariant::Three => ExampleVariantT::Three(Box::new(
        self.array_example_variant1_as_three()
            .expect("Invalid union table, expected `ExampleVariant::Three`.")
            .unpack()
      )),
      ExampleVariant::Four => ExampleVariantT::Four(Box::new(
        self.array_example_variant1_as_four()
            .expect("Invalid union table, expected `ExampleVariant::Four`.")
            .unpack()
      )),
      _ => ExampleVariantT::NONE,
    };
    let array_example_variant2 = match self.array_example_variant2_type() {
      ExampleVariant::NONE => ExampleVariantT::NONE,
      ExampleVariant::Zero => ExampleVariantT::Zero(Box::new(
        self.array_example_variant2_as_zero()
            .expect("Invalid union table, expected `ExampleVariant::Zero`.")
            .unpack()
      )),
      ExampleVariant::One => ExampleVariantT::One(Box::new(
        self.array_example_variant2_as_one()
            .expect("Invalid union table, expected `ExampleVariant::One`.")
            .unpack()
      )),
      ExampleVariant::Two => ExampleVariantT::Two(Box::new(
        self.array_example_variant2_as_two()
            .expect("Invalid union table, expected `ExampleVariant::Two`.")
            .unpack()
      )),
      ExampleVariant::Three => ExampleVariantT::Three(Box::new(
        self.array_example_variant2_as_three()
            .expect("Invalid union table, expected `ExampleVariant::Three`.")
            .unpack()
      )),
      ExampleVariant::Four => ExampleVariantT::Four(Box::new(
        self.array_example_variant2_as_four()
            .expect("Invalid union table, expected `ExampleVariant::Four`.")
            .unpack()
      )),
      _ => ExampleVariantT::NONE,
    };
    let array_example_variant3 = match self.array_example_variant3_type() {
      ExampleVariant::NONE => ExampleVariantT::NONE,
      ExampleVariant::Zero => ExampleVariantT::Zero(Box::new(
        self.array_example_variant3_as_zero()
            .expect("Invalid union table, expected `ExampleVariant::Zero`.")
            .unpack()
      )),
      ExampleVariant::One => ExampleVariantT::One(Box::new(
        self.array_example_variant3_as_one()
            .expect("Invalid union table, expected `ExampleVariant::One`.")
            .unpack()
      )),
      ExampleVariant::Two => ExampleVariantT::Two(Box::new(
        self.array_example_variant3_as_two()
            .expect("Invalid union table, expected `ExampleVariant::Two`.")
            .unpack()
      )),
      ExampleVariant::Three => ExampleVariantT::Three(Box::new(
        self.array_example_variant3_as_three()
            .expect("Invalid union table, expected `ExampleVariant::Three`.")
            .unpack()
      )),
      ExampleVariant::Four => ExampleVariantT::Four(Box::new(
        self.array_example_variant3_as_four()
            .expect("Invalid union table, expected `ExampleVariant::Four`.")
            .unpack()
      )),
      _ => ExampleVariantT::NONE,
    };
    let array_example_variant4 = match self.array_example_variant4_type() {
      ExampleVariant::NONE => ExampleVariantT::NONE,
      ExampleVariant::Zero => ExampleVariantT::Zero(Box::new(
        self.array_example_variant4_as_zero()
            .expect("Invalid union table, expected `ExampleVariant::Zero`.")
            .unpack()
      )),
      ExampleVariant::One => ExampleVariantT::One(Box::new(
        self.array_example_variant4_as_one()
            .expect("Invalid union table, expected `ExampleVariant::One`.")
            .unpack()
      )),
      ExampleVariant::Two => ExampleVariantT::Two(Box::new(
        self.array_example_variant4_as_two()
            .expect("Invalid union table, expected `ExampleVariant::Two`.")
            .unpack()
      )),
      ExampleVariant::Three => ExampleVariantT::Three(Box::new(
        self.array_example_variant4_as_three()
            .expect("Invalid union table, expected `ExampleVariant::Three`.")
            .unpack()
      )),
      ExampleVariant::Four => ExampleVariantT::Four(Box::new(
        self.array_example_variant4_as_four()
            .expect("Invalid union table, expected `ExampleVariant::Four`.")
            .unpack()
      )),
      _ => ExampleVariantT::NONE,
    };
    let array_example_variant5 = match self.array_example_variant5_type() {
      ExampleVariant::NONE => ExampleVariantT::NONE,
      ExampleVariant::Zero => ExampleVariantT::Zero(Box::new(
        self.array_example_variant5_as_zero()
            .expect("Invalid union table, expected `ExampleVariant::Zero`.")
            .unpack()
      )),
      ExampleVariant::One => ExampleVariantT::One(Box::new(
        self.array_example_variant5_as_one()
            .expect("Invalid union table, expected `ExampleVariant::One`.")
            .unpack()
      )),
      ExampleVariant::Two => ExampleVariantT::Two(Box::new(
        self.array_example_variant5_as_two()
            .expect("Invalid union table, expected `ExampleVariant::Two`.")
            .unpack()
      )),
      ExampleVariant::Three => ExampleVariantT::Three(Box::new(
        self.array_example_variant5_as_three()
            .expect("Invalid union table, expected `ExampleVariant::Three`.")
            .unpack()
      )),
      ExampleVariant::Four => ExampleVariantT::Four(Box::new(
        self.array_example_variant5_as_four()
            .expect("Invalid union table, expected `ExampleVariant::Four`.")
            .unpack()
      )),
      _ => ExampleVariantT::NONE,
    };
    BasicTypesT {
      unsigned8,
      unsigned16,
      unsigned32,
      unsigned64,
      public_key,
      string,
      example_struct,
      example_enum,
      example_variant,
      array8,
      array16,
      array32,
      array64,
      array_public_key,
      array_string,
      array_example_struct,
      array_example_enum,
      array_example_variant1,
      array_example_variant2,
      array_example_variant3,
      array_example_variant4,
      array_example_variant5,
    }
  }

  #[inline]
  pub fn unsigned8(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(BasicTypes::VT_UNSIGNED8, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unsigned16(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(BasicTypes::VT_UNSIGNED16, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unsigned32(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(BasicTypes::VT_UNSIGNED32, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unsigned64(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(BasicTypes::VT_UNSIGNED64, Some(0)).unwrap()}
  }
  #[inline]
  pub fn public_key(&self) -> Option<&'a PublicKey> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PublicKey>(BasicTypes::VT_PUBLIC_KEY, None)}
  }
  #[inline]
  pub fn string(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BasicTypes::VT_STRING, None)}
  }
  #[inline]
  pub fn example_struct(&self) -> Option<ExampleStruct<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ExampleStruct>>(BasicTypes::VT_EXAMPLE_STRUCT, None)}
  }
  #[inline]
  pub fn example_enum(&self) -> ExampleEnum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExampleEnum>(BasicTypes::VT_EXAMPLE_ENUM, Some(ExampleEnum::Zero)).unwrap()}
  }
  #[inline]
  pub fn example_variant_type(&self) -> ExampleVariant {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExampleVariant>(BasicTypes::VT_EXAMPLE_VARIANT_TYPE, Some(ExampleVariant::NONE)).unwrap()}
  }
  #[inline]
  pub fn example_variant(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(BasicTypes::VT_EXAMPLE_VARIANT, None)}
  }
  #[inline]
  pub fn array8(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(BasicTypes::VT_ARRAY8, None)}
  }
  #[inline]
  pub fn array16(&self) -> Option<flatbuffers::Vector<'a, u16>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(BasicTypes::VT_ARRAY16, None)}
  }
  #[inline]
  pub fn array32(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(BasicTypes::VT_ARRAY32, None)}
  }
  #[inline]
  pub fn array64(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(BasicTypes::VT_ARRAY64, None)}
  }
  #[inline]
  pub fn array_public_key(&self) -> Option<flatbuffers::Vector<'a, PublicKey>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, PublicKey>>>(BasicTypes::VT_ARRAY_PUBLIC_KEY, None)}
  }
  #[inline]
  pub fn array_string(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(BasicTypes::VT_ARRAY_STRING, None)}
  }
  #[inline]
  pub fn array_example_struct(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ExampleStruct<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ExampleStruct>>>>(BasicTypes::VT_ARRAY_EXAMPLE_STRUCT, None)}
  }
  #[inline]
  pub fn array_example_enum(&self) -> Option<flatbuffers::Vector<'a, ExampleEnum>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ExampleEnum>>>(BasicTypes::VT_ARRAY_EXAMPLE_ENUM, None)}
  }
  #[inline]
  pub fn array_example_variant1_type(&self) -> ExampleVariant {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT1_TYPE, Some(ExampleVariant::NONE)).unwrap()}
  }
  #[inline]
  pub fn array_example_variant1(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT1, None)}
  }
  #[inline]
  pub fn array_example_variant2_type(&self) -> ExampleVariant {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT2_TYPE, Some(ExampleVariant::NONE)).unwrap()}
  }
  #[inline]
  pub fn array_example_variant2(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT2, None)}
  }
  #[inline]
  pub fn array_example_variant3_type(&self) -> ExampleVariant {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT3_TYPE, Some(ExampleVariant::NONE)).unwrap()}
  }
  #[inline]
  pub fn array_example_variant3(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT3, None)}
  }
  #[inline]
  pub fn array_example_variant4_type(&self) -> ExampleVariant {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT4_TYPE, Some(ExampleVariant::NONE)).unwrap()}
  }
  #[inline]
  pub fn array_example_variant4(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT4, None)}
  }
  #[inline]
  pub fn array_example_variant5_type(&self) -> ExampleVariant {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT5_TYPE, Some(ExampleVariant::NONE)).unwrap()}
  }
  #[inline]
  pub fn array_example_variant5(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT5, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn example_variant_as_zero(&self) -> Option<ZeroS<'a>> {
    if self.example_variant_type() == ExampleVariant::Zero {
      self.example_variant().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ZeroS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn example_variant_as_one(&self) -> Option<OneS<'a>> {
    if self.example_variant_type() == ExampleVariant::One {
      self.example_variant().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { OneS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn example_variant_as_two(&self) -> Option<TwoS<'a>> {
    if self.example_variant_type() == ExampleVariant::Two {
      self.example_variant().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TwoS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn example_variant_as_three(&self) -> Option<ThreeS<'a>> {
    if self.example_variant_type() == ExampleVariant::Three {
      self.example_variant().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ThreeS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn example_variant_as_four(&self) -> Option<PublicKeyHolder<'a>> {
    if self.example_variant_type() == ExampleVariant::Four {
      self.example_variant().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { PublicKeyHolder::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant1_as_zero(&self) -> Option<ZeroS<'a>> {
    if self.array_example_variant1_type() == ExampleVariant::Zero {
      self.array_example_variant1().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ZeroS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant1_as_one(&self) -> Option<OneS<'a>> {
    if self.array_example_variant1_type() == ExampleVariant::One {
      self.array_example_variant1().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { OneS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant1_as_two(&self) -> Option<TwoS<'a>> {
    if self.array_example_variant1_type() == ExampleVariant::Two {
      self.array_example_variant1().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TwoS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant1_as_three(&self) -> Option<ThreeS<'a>> {
    if self.array_example_variant1_type() == ExampleVariant::Three {
      self.array_example_variant1().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ThreeS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant1_as_four(&self) -> Option<PublicKeyHolder<'a>> {
    if self.array_example_variant1_type() == ExampleVariant::Four {
      self.array_example_variant1().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { PublicKeyHolder::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant2_as_zero(&self) -> Option<ZeroS<'a>> {
    if self.array_example_variant2_type() == ExampleVariant::Zero {
      self.array_example_variant2().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ZeroS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant2_as_one(&self) -> Option<OneS<'a>> {
    if self.array_example_variant2_type() == ExampleVariant::One {
      self.array_example_variant2().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { OneS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant2_as_two(&self) -> Option<TwoS<'a>> {
    if self.array_example_variant2_type() == ExampleVariant::Two {
      self.array_example_variant2().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TwoS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant2_as_three(&self) -> Option<ThreeS<'a>> {
    if self.array_example_variant2_type() == ExampleVariant::Three {
      self.array_example_variant2().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ThreeS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant2_as_four(&self) -> Option<PublicKeyHolder<'a>> {
    if self.array_example_variant2_type() == ExampleVariant::Four {
      self.array_example_variant2().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { PublicKeyHolder::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant3_as_zero(&self) -> Option<ZeroS<'a>> {
    if self.array_example_variant3_type() == ExampleVariant::Zero {
      self.array_example_variant3().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ZeroS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant3_as_one(&self) -> Option<OneS<'a>> {
    if self.array_example_variant3_type() == ExampleVariant::One {
      self.array_example_variant3().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { OneS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant3_as_two(&self) -> Option<TwoS<'a>> {
    if self.array_example_variant3_type() == ExampleVariant::Two {
      self.array_example_variant3().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TwoS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant3_as_three(&self) -> Option<ThreeS<'a>> {
    if self.array_example_variant3_type() == ExampleVariant::Three {
      self.array_example_variant3().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ThreeS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant3_as_four(&self) -> Option<PublicKeyHolder<'a>> {
    if self.array_example_variant3_type() == ExampleVariant::Four {
      self.array_example_variant3().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { PublicKeyHolder::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant4_as_zero(&self) -> Option<ZeroS<'a>> {
    if self.array_example_variant4_type() == ExampleVariant::Zero {
      self.array_example_variant4().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ZeroS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant4_as_one(&self) -> Option<OneS<'a>> {
    if self.array_example_variant4_type() == ExampleVariant::One {
      self.array_example_variant4().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { OneS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant4_as_two(&self) -> Option<TwoS<'a>> {
    if self.array_example_variant4_type() == ExampleVariant::Two {
      self.array_example_variant4().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TwoS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant4_as_three(&self) -> Option<ThreeS<'a>> {
    if self.array_example_variant4_type() == ExampleVariant::Three {
      self.array_example_variant4().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ThreeS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant4_as_four(&self) -> Option<PublicKeyHolder<'a>> {
    if self.array_example_variant4_type() == ExampleVariant::Four {
      self.array_example_variant4().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { PublicKeyHolder::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant5_as_zero(&self) -> Option<ZeroS<'a>> {
    if self.array_example_variant5_type() == ExampleVariant::Zero {
      self.array_example_variant5().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ZeroS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant5_as_one(&self) -> Option<OneS<'a>> {
    if self.array_example_variant5_type() == ExampleVariant::One {
      self.array_example_variant5().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { OneS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant5_as_two(&self) -> Option<TwoS<'a>> {
    if self.array_example_variant5_type() == ExampleVariant::Two {
      self.array_example_variant5().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TwoS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant5_as_three(&self) -> Option<ThreeS<'a>> {
    if self.array_example_variant5_type() == ExampleVariant::Three {
      self.array_example_variant5().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ThreeS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn array_example_variant5_as_four(&self) -> Option<PublicKeyHolder<'a>> {
    if self.array_example_variant5_type() == ExampleVariant::Four {
      self.array_example_variant5().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { PublicKeyHolder::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for BasicTypes<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("unsigned8", Self::VT_UNSIGNED8, false)?
     .visit_field::<u16>("unsigned16", Self::VT_UNSIGNED16, false)?
     .visit_field::<u32>("unsigned32", Self::VT_UNSIGNED32, false)?
     .visit_field::<u64>("unsigned64", Self::VT_UNSIGNED64, false)?
     .visit_field::<PublicKey>("public_key", Self::VT_PUBLIC_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("string", Self::VT_STRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ExampleStruct>>("example_struct", Self::VT_EXAMPLE_STRUCT, false)?
     .visit_field::<ExampleEnum>("example_enum", Self::VT_EXAMPLE_ENUM, false)?
     .visit_union::<ExampleVariant, _>("example_variant_type", Self::VT_EXAMPLE_VARIANT_TYPE, "example_variant", Self::VT_EXAMPLE_VARIANT, false, |key, v, pos| {
        match key {
          ExampleVariant::Zero => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ZeroS>>("ExampleVariant::Zero", pos),
          ExampleVariant::One => v.verify_union_variant::<flatbuffers::ForwardsUOffset<OneS>>("ExampleVariant::One", pos),
          ExampleVariant::Two => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TwoS>>("ExampleVariant::Two", pos),
          ExampleVariant::Three => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ThreeS>>("ExampleVariant::Three", pos),
          ExampleVariant::Four => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PublicKeyHolder>>("ExampleVariant::Four", pos),
          _ => Ok(()),
        }
     })?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("array8", Self::VT_ARRAY8, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>("array16", Self::VT_ARRAY16, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("array32", Self::VT_ARRAY32, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("array64", Self::VT_ARRAY64, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, PublicKey>>>("array_public_key", Self::VT_ARRAY_PUBLIC_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("array_string", Self::VT_ARRAY_STRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ExampleStruct>>>>("array_example_struct", Self::VT_ARRAY_EXAMPLE_STRUCT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ExampleEnum>>>("array_example_enum", Self::VT_ARRAY_EXAMPLE_ENUM, false)?
     .visit_union::<ExampleVariant, _>("array_example_variant1_type", Self::VT_ARRAY_EXAMPLE_VARIANT1_TYPE, "array_example_variant1", Self::VT_ARRAY_EXAMPLE_VARIANT1, false, |key, v, pos| {
        match key {
          ExampleVariant::Zero => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ZeroS>>("ExampleVariant::Zero", pos),
          ExampleVariant::One => v.verify_union_variant::<flatbuffers::ForwardsUOffset<OneS>>("ExampleVariant::One", pos),
          ExampleVariant::Two => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TwoS>>("ExampleVariant::Two", pos),
          ExampleVariant::Three => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ThreeS>>("ExampleVariant::Three", pos),
          ExampleVariant::Four => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PublicKeyHolder>>("ExampleVariant::Four", pos),
          _ => Ok(()),
        }
     })?
     .visit_union::<ExampleVariant, _>("array_example_variant2_type", Self::VT_ARRAY_EXAMPLE_VARIANT2_TYPE, "array_example_variant2", Self::VT_ARRAY_EXAMPLE_VARIANT2, false, |key, v, pos| {
        match key {
          ExampleVariant::Zero => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ZeroS>>("ExampleVariant::Zero", pos),
          ExampleVariant::One => v.verify_union_variant::<flatbuffers::ForwardsUOffset<OneS>>("ExampleVariant::One", pos),
          ExampleVariant::Two => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TwoS>>("ExampleVariant::Two", pos),
          ExampleVariant::Three => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ThreeS>>("ExampleVariant::Three", pos),
          ExampleVariant::Four => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PublicKeyHolder>>("ExampleVariant::Four", pos),
          _ => Ok(()),
        }
     })?
     .visit_union::<ExampleVariant, _>("array_example_variant3_type", Self::VT_ARRAY_EXAMPLE_VARIANT3_TYPE, "array_example_variant3", Self::VT_ARRAY_EXAMPLE_VARIANT3, false, |key, v, pos| {
        match key {
          ExampleVariant::Zero => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ZeroS>>("ExampleVariant::Zero", pos),
          ExampleVariant::One => v.verify_union_variant::<flatbuffers::ForwardsUOffset<OneS>>("ExampleVariant::One", pos),
          ExampleVariant::Two => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TwoS>>("ExampleVariant::Two", pos),
          ExampleVariant::Three => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ThreeS>>("ExampleVariant::Three", pos),
          ExampleVariant::Four => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PublicKeyHolder>>("ExampleVariant::Four", pos),
          _ => Ok(()),
        }
     })?
     .visit_union::<ExampleVariant, _>("array_example_variant4_type", Self::VT_ARRAY_EXAMPLE_VARIANT4_TYPE, "array_example_variant4", Self::VT_ARRAY_EXAMPLE_VARIANT4, false, |key, v, pos| {
        match key {
          ExampleVariant::Zero => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ZeroS>>("ExampleVariant::Zero", pos),
          ExampleVariant::One => v.verify_union_variant::<flatbuffers::ForwardsUOffset<OneS>>("ExampleVariant::One", pos),
          ExampleVariant::Two => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TwoS>>("ExampleVariant::Two", pos),
          ExampleVariant::Three => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ThreeS>>("ExampleVariant::Three", pos),
          ExampleVariant::Four => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PublicKeyHolder>>("ExampleVariant::Four", pos),
          _ => Ok(()),
        }
     })?
     .visit_union::<ExampleVariant, _>("array_example_variant5_type", Self::VT_ARRAY_EXAMPLE_VARIANT5_TYPE, "array_example_variant5", Self::VT_ARRAY_EXAMPLE_VARIANT5, false, |key, v, pos| {
        match key {
          ExampleVariant::Zero => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ZeroS>>("ExampleVariant::Zero", pos),
          ExampleVariant::One => v.verify_union_variant::<flatbuffers::ForwardsUOffset<OneS>>("ExampleVariant::One", pos),
          ExampleVariant::Two => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TwoS>>("ExampleVariant::Two", pos),
          ExampleVariant::Three => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ThreeS>>("ExampleVariant::Three", pos),
          ExampleVariant::Four => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PublicKeyHolder>>("ExampleVariant::Four", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct BasicTypesArgs<'a> {
    pub unsigned8: u8,
    pub unsigned16: u16,
    pub unsigned32: u32,
    pub unsigned64: u64,
    pub public_key: Option<&'a PublicKey>,
    pub string: Option<flatbuffers::WIPOffset<&'a str>>,
    pub example_struct: Option<flatbuffers::WIPOffset<ExampleStruct<'a>>>,
    pub example_enum: ExampleEnum,
    pub example_variant_type: ExampleVariant,
    pub example_variant: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub array8: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub array16: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
    pub array32: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub array64: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub array_public_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, PublicKey>>>,
    pub array_string: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub array_example_struct: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ExampleStruct<'a>>>>>,
    pub array_example_enum: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ExampleEnum>>>,
    pub array_example_variant1_type: ExampleVariant,
    pub array_example_variant1: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub array_example_variant2_type: ExampleVariant,
    pub array_example_variant2: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub array_example_variant3_type: ExampleVariant,
    pub array_example_variant3: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub array_example_variant4_type: ExampleVariant,
    pub array_example_variant4: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub array_example_variant5_type: ExampleVariant,
    pub array_example_variant5: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for BasicTypesArgs<'a> {
  #[inline]
  fn default() -> Self {
    BasicTypesArgs {
      unsigned8: 0,
      unsigned16: 0,
      unsigned32: 0,
      unsigned64: 0,
      public_key: None,
      string: None,
      example_struct: None,
      example_enum: ExampleEnum::Zero,
      example_variant_type: ExampleVariant::NONE,
      example_variant: None,
      array8: None,
      array16: None,
      array32: None,
      array64: None,
      array_public_key: None,
      array_string: None,
      array_example_struct: None,
      array_example_enum: None,
      array_example_variant1_type: ExampleVariant::NONE,
      array_example_variant1: None,
      array_example_variant2_type: ExampleVariant::NONE,
      array_example_variant2: None,
      array_example_variant3_type: ExampleVariant::NONE,
      array_example_variant3: None,
      array_example_variant4_type: ExampleVariant::NONE,
      array_example_variant4: None,
      array_example_variant5_type: ExampleVariant::NONE,
      array_example_variant5: None,
    }
  }
}

pub struct BasicTypesBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BasicTypesBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_unsigned8(&mut self, unsigned8: u8) {
    self.fbb_.push_slot::<u8>(BasicTypes::VT_UNSIGNED8, unsigned8, 0);
  }
  #[inline]
  pub fn add_unsigned16(&mut self, unsigned16: u16) {
    self.fbb_.push_slot::<u16>(BasicTypes::VT_UNSIGNED16, unsigned16, 0);
  }
  #[inline]
  pub fn add_unsigned32(&mut self, unsigned32: u32) {
    self.fbb_.push_slot::<u32>(BasicTypes::VT_UNSIGNED32, unsigned32, 0);
  }
  #[inline]
  pub fn add_unsigned64(&mut self, unsigned64: u64) {
    self.fbb_.push_slot::<u64>(BasicTypes::VT_UNSIGNED64, unsigned64, 0);
  }
  #[inline]
  pub fn add_public_key(&mut self, public_key: &PublicKey) {
    self.fbb_.push_slot_always::<&PublicKey>(BasicTypes::VT_PUBLIC_KEY, public_key);
  }
  #[inline]
  pub fn add_string(&mut self, string: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_STRING, string);
  }
  #[inline]
  pub fn add_example_struct(&mut self, example_struct: flatbuffers::WIPOffset<ExampleStruct<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ExampleStruct>>(BasicTypes::VT_EXAMPLE_STRUCT, example_struct);
  }
  #[inline]
  pub fn add_example_enum(&mut self, example_enum: ExampleEnum) {
    self.fbb_.push_slot::<ExampleEnum>(BasicTypes::VT_EXAMPLE_ENUM, example_enum, ExampleEnum::Zero);
  }
  #[inline]
  pub fn add_example_variant_type(&mut self, example_variant_type: ExampleVariant) {
    self.fbb_.push_slot::<ExampleVariant>(BasicTypes::VT_EXAMPLE_VARIANT_TYPE, example_variant_type, ExampleVariant::NONE);
  }
  #[inline]
  pub fn add_example_variant(&mut self, example_variant: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_EXAMPLE_VARIANT, example_variant);
  }
  #[inline]
  pub fn add_array8(&mut self, array8: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY8, array8);
  }
  #[inline]
  pub fn add_array16(&mut self, array16: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u16>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY16, array16);
  }
  #[inline]
  pub fn add_array32(&mut self, array32: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY32, array32);
  }
  #[inline]
  pub fn add_array64(&mut self, array64: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY64, array64);
  }
  #[inline]
  pub fn add_array_public_key(&mut self, array_public_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , PublicKey>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_PUBLIC_KEY, array_public_key);
  }
  #[inline]
  pub fn add_array_string(&mut self, array_string: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_STRING, array_string);
  }
  #[inline]
  pub fn add_array_example_struct(&mut self, array_example_struct: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ExampleStruct<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_EXAMPLE_STRUCT, array_example_struct);
  }
  #[inline]
  pub fn add_array_example_enum(&mut self, array_example_enum: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ExampleEnum>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_EXAMPLE_ENUM, array_example_enum);
  }
  #[inline]
  pub fn add_array_example_variant1_type(&mut self, array_example_variant1_type: ExampleVariant) {
    self.fbb_.push_slot::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT1_TYPE, array_example_variant1_type, ExampleVariant::NONE);
  }
  #[inline]
  pub fn add_array_example_variant1(&mut self, array_example_variant1: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT1, array_example_variant1);
  }
  #[inline]
  pub fn add_array_example_variant2_type(&mut self, array_example_variant2_type: ExampleVariant) {
    self.fbb_.push_slot::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT2_TYPE, array_example_variant2_type, ExampleVariant::NONE);
  }
  #[inline]
  pub fn add_array_example_variant2(&mut self, array_example_variant2: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT2, array_example_variant2);
  }
  #[inline]
  pub fn add_array_example_variant3_type(&mut self, array_example_variant3_type: ExampleVariant) {
    self.fbb_.push_slot::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT3_TYPE, array_example_variant3_type, ExampleVariant::NONE);
  }
  #[inline]
  pub fn add_array_example_variant3(&mut self, array_example_variant3: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT3, array_example_variant3);
  }
  #[inline]
  pub fn add_array_example_variant4_type(&mut self, array_example_variant4_type: ExampleVariant) {
    self.fbb_.push_slot::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT4_TYPE, array_example_variant4_type, ExampleVariant::NONE);
  }
  #[inline]
  pub fn add_array_example_variant4(&mut self, array_example_variant4: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT4, array_example_variant4);
  }
  #[inline]
  pub fn add_array_example_variant5_type(&mut self, array_example_variant5_type: ExampleVariant) {
    self.fbb_.push_slot::<ExampleVariant>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT5_TYPE, array_example_variant5_type, ExampleVariant::NONE);
  }
  #[inline]
  pub fn add_array_example_variant5(&mut self, array_example_variant5: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BasicTypes::VT_ARRAY_EXAMPLE_VARIANT5, array_example_variant5);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BasicTypesBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BasicTypesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BasicTypes<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BasicTypes<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BasicTypes");
      ds.field("unsigned8", &self.unsigned8());
      ds.field("unsigned16", &self.unsigned16());
      ds.field("unsigned32", &self.unsigned32());
      ds.field("unsigned64", &self.unsigned64());
      ds.field("public_key", &self.public_key());
      ds.field("string", &self.string());
      ds.field("example_struct", &self.example_struct());
      ds.field("example_enum", &self.example_enum());
      ds.field("example_variant_type", &self.example_variant_type());
      match self.example_variant_type() {
        ExampleVariant::Zero => {
          if let Some(x) = self.example_variant_as_zero() {
            ds.field("example_variant", &x)
          } else {
            ds.field("example_variant", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::One => {
          if let Some(x) = self.example_variant_as_one() {
            ds.field("example_variant", &x)
          } else {
            ds.field("example_variant", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Two => {
          if let Some(x) = self.example_variant_as_two() {
            ds.field("example_variant", &x)
          } else {
            ds.field("example_variant", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Three => {
          if let Some(x) = self.example_variant_as_three() {
            ds.field("example_variant", &x)
          } else {
            ds.field("example_variant", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Four => {
          if let Some(x) = self.example_variant_as_four() {
            ds.field("example_variant", &x)
          } else {
            ds.field("example_variant", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("example_variant", &x)
        },
      };
      ds.field("array8", &self.array8());
      ds.field("array16", &self.array16());
      ds.field("array32", &self.array32());
      ds.field("array64", &self.array64());
      ds.field("array_public_key", &self.array_public_key());
      ds.field("array_string", &self.array_string());
      ds.field("array_example_struct", &self.array_example_struct());
      ds.field("array_example_enum", &self.array_example_enum());
      ds.field("array_example_variant1_type", &self.array_example_variant1_type());
      match self.array_example_variant1_type() {
        ExampleVariant::Zero => {
          if let Some(x) = self.array_example_variant1_as_zero() {
            ds.field("array_example_variant1", &x)
          } else {
            ds.field("array_example_variant1", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::One => {
          if let Some(x) = self.array_example_variant1_as_one() {
            ds.field("array_example_variant1", &x)
          } else {
            ds.field("array_example_variant1", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Two => {
          if let Some(x) = self.array_example_variant1_as_two() {
            ds.field("array_example_variant1", &x)
          } else {
            ds.field("array_example_variant1", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Three => {
          if let Some(x) = self.array_example_variant1_as_three() {
            ds.field("array_example_variant1", &x)
          } else {
            ds.field("array_example_variant1", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Four => {
          if let Some(x) = self.array_example_variant1_as_four() {
            ds.field("array_example_variant1", &x)
          } else {
            ds.field("array_example_variant1", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("array_example_variant1", &x)
        },
      };
      ds.field("array_example_variant2_type", &self.array_example_variant2_type());
      match self.array_example_variant2_type() {
        ExampleVariant::Zero => {
          if let Some(x) = self.array_example_variant2_as_zero() {
            ds.field("array_example_variant2", &x)
          } else {
            ds.field("array_example_variant2", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::One => {
          if let Some(x) = self.array_example_variant2_as_one() {
            ds.field("array_example_variant2", &x)
          } else {
            ds.field("array_example_variant2", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Two => {
          if let Some(x) = self.array_example_variant2_as_two() {
            ds.field("array_example_variant2", &x)
          } else {
            ds.field("array_example_variant2", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Three => {
          if let Some(x) = self.array_example_variant2_as_three() {
            ds.field("array_example_variant2", &x)
          } else {
            ds.field("array_example_variant2", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Four => {
          if let Some(x) = self.array_example_variant2_as_four() {
            ds.field("array_example_variant2", &x)
          } else {
            ds.field("array_example_variant2", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("array_example_variant2", &x)
        },
      };
      ds.field("array_example_variant3_type", &self.array_example_variant3_type());
      match self.array_example_variant3_type() {
        ExampleVariant::Zero => {
          if let Some(x) = self.array_example_variant3_as_zero() {
            ds.field("array_example_variant3", &x)
          } else {
            ds.field("array_example_variant3", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::One => {
          if let Some(x) = self.array_example_variant3_as_one() {
            ds.field("array_example_variant3", &x)
          } else {
            ds.field("array_example_variant3", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Two => {
          if let Some(x) = self.array_example_variant3_as_two() {
            ds.field("array_example_variant3", &x)
          } else {
            ds.field("array_example_variant3", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Three => {
          if let Some(x) = self.array_example_variant3_as_three() {
            ds.field("array_example_variant3", &x)
          } else {
            ds.field("array_example_variant3", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Four => {
          if let Some(x) = self.array_example_variant3_as_four() {
            ds.field("array_example_variant3", &x)
          } else {
            ds.field("array_example_variant3", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("array_example_variant3", &x)
        },
      };
      ds.field("array_example_variant4_type", &self.array_example_variant4_type());
      match self.array_example_variant4_type() {
        ExampleVariant::Zero => {
          if let Some(x) = self.array_example_variant4_as_zero() {
            ds.field("array_example_variant4", &x)
          } else {
            ds.field("array_example_variant4", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::One => {
          if let Some(x) = self.array_example_variant4_as_one() {
            ds.field("array_example_variant4", &x)
          } else {
            ds.field("array_example_variant4", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Two => {
          if let Some(x) = self.array_example_variant4_as_two() {
            ds.field("array_example_variant4", &x)
          } else {
            ds.field("array_example_variant4", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Three => {
          if let Some(x) = self.array_example_variant4_as_three() {
            ds.field("array_example_variant4", &x)
          } else {
            ds.field("array_example_variant4", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Four => {
          if let Some(x) = self.array_example_variant4_as_four() {
            ds.field("array_example_variant4", &x)
          } else {
            ds.field("array_example_variant4", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("array_example_variant4", &x)
        },
      };
      ds.field("array_example_variant5_type", &self.array_example_variant5_type());
      match self.array_example_variant5_type() {
        ExampleVariant::Zero => {
          if let Some(x) = self.array_example_variant5_as_zero() {
            ds.field("array_example_variant5", &x)
          } else {
            ds.field("array_example_variant5", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::One => {
          if let Some(x) = self.array_example_variant5_as_one() {
            ds.field("array_example_variant5", &x)
          } else {
            ds.field("array_example_variant5", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Two => {
          if let Some(x) = self.array_example_variant5_as_two() {
            ds.field("array_example_variant5", &x)
          } else {
            ds.field("array_example_variant5", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Three => {
          if let Some(x) = self.array_example_variant5_as_three() {
            ds.field("array_example_variant5", &x)
          } else {
            ds.field("array_example_variant5", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ExampleVariant::Four => {
          if let Some(x) = self.array_example_variant5_as_four() {
            ds.field("array_example_variant5", &x)
          } else {
            ds.field("array_example_variant5", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("array_example_variant5", &x)
        },
      };
      ds.finish()
  }
}
#[derive(Debug, Clone, PartialEq)]
pub struct BasicTypesT {
  pub unsigned8: u8,
  pub unsigned16: u16,
  pub unsigned32: u32,
  pub unsigned64: u64,
  pub public_key: Option<PublicKeyT>,
  pub string: Option<String>,
  pub example_struct: Option<Box<ExampleStructT>>,
  pub example_enum: ExampleEnum,
  pub example_variant: ExampleVariantT,
  pub array8: Option<Vec<u8>>,
  pub array16: Option<Vec<u16>>,
  pub array32: Option<Vec<u32>>,
  pub array64: Option<Vec<u64>>,
  pub array_public_key: Option<Vec<PublicKeyT>>,
  pub array_string: Option<Vec<String>>,
  pub array_example_struct: Option<Vec<ExampleStructT>>,
  pub array_example_enum: Option<Vec<ExampleEnum>>,
  pub array_example_variant1: ExampleVariantT,
  pub array_example_variant2: ExampleVariantT,
  pub array_example_variant3: ExampleVariantT,
  pub array_example_variant4: ExampleVariantT,
  pub array_example_variant5: ExampleVariantT,
}
impl Default for BasicTypesT {
  fn default() -> Self {
    Self {
      unsigned8: 0,
      unsigned16: 0,
      unsigned32: 0,
      unsigned64: 0,
      public_key: None,
      string: None,
      example_struct: None,
      example_enum: ExampleEnum::Zero,
      example_variant: ExampleVariantT::NONE,
      array8: None,
      array16: None,
      array32: None,
      array64: None,
      array_public_key: None,
      array_string: None,
      array_example_struct: None,
      array_example_enum: None,
      array_example_variant1: ExampleVariantT::NONE,
      array_example_variant2: ExampleVariantT::NONE,
      array_example_variant3: ExampleVariantT::NONE,
      array_example_variant4: ExampleVariantT::NONE,
      array_example_variant5: ExampleVariantT::NONE,
    }
  }
}
impl BasicTypesT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BasicTypes<'b>> {
    let unsigned8 = self.unsigned8;
    let unsigned16 = self.unsigned16;
    let unsigned32 = self.unsigned32;
    let unsigned64 = self.unsigned64;
    let public_key_tmp = self.public_key.as_ref().map(|x| x.pack());
    let public_key = public_key_tmp.as_ref();
    let string = self.string.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let example_struct = self.example_struct.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let example_enum = self.example_enum;
    let example_variant_type = self.example_variant.example_variant_type();
    let example_variant = self.example_variant.pack(_fbb);
    let array8 = self.array8.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let array16 = self.array16.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let array32 = self.array32.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let array64 = self.array64.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let array_public_key = self.array_public_key.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack()).collect();_fbb.create_vector(&w)
    });
    let array_string = self.array_string.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let array_example_struct = self.array_example_struct.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let array_example_enum = self.array_example_enum.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let array_example_variant1_type = self.array_example_variant1.example_variant_type();
    let array_example_variant1 = self.array_example_variant1.pack(_fbb);
    let array_example_variant2_type = self.array_example_variant2.example_variant_type();
    let array_example_variant2 = self.array_example_variant2.pack(_fbb);
    let array_example_variant3_type = self.array_example_variant3.example_variant_type();
    let array_example_variant3 = self.array_example_variant3.pack(_fbb);
    let array_example_variant4_type = self.array_example_variant4.example_variant_type();
    let array_example_variant4 = self.array_example_variant4.pack(_fbb);
    let array_example_variant5_type = self.array_example_variant5.example_variant_type();
    let array_example_variant5 = self.array_example_variant5.pack(_fbb);
    BasicTypes::create(_fbb, &BasicTypesArgs{
      unsigned8,
      unsigned16,
      unsigned32,
      unsigned64,
      public_key,
      string,
      example_struct,
      example_enum,
      example_variant_type,
      example_variant,
      array8,
      array16,
      array32,
      array64,
      array_public_key,
      array_string,
      array_example_struct,
      array_example_enum,
      array_example_variant1_type,
      array_example_variant1,
      array_example_variant2_type,
      array_example_variant2,
      array_example_variant3_type,
      array_example_variant3,
      array_example_variant4_type,
      array_example_variant4,
      array_example_variant5_type,
      array_example_variant5,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `BasicTypes`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_basic_types_unchecked`.
pub fn root_as_basic_types(buf: &[u8]) -> Result<BasicTypes, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<BasicTypes>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `BasicTypes` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_basic_types_unchecked`.
pub fn size_prefixed_root_as_basic_types(buf: &[u8]) -> Result<BasicTypes, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<BasicTypes>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `BasicTypes` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_basic_types_unchecked`.
pub fn root_as_basic_types_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BasicTypes<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<BasicTypes<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `BasicTypes` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_basic_types_unchecked`.
pub fn size_prefixed_root_as_basic_types_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BasicTypes<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<BasicTypes<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a BasicTypes and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `BasicTypes`.
pub unsafe fn root_as_basic_types_unchecked(buf: &[u8]) -> BasicTypes {
  flatbuffers::root_unchecked::<BasicTypes>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed BasicTypes and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `BasicTypes`.
pub unsafe fn size_prefixed_root_as_basic_types_unchecked(buf: &[u8]) -> BasicTypes {
  flatbuffers::size_prefixed_root_unchecked::<BasicTypes>(buf)
}
#[inline]
pub fn finish_basic_types_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<BasicTypes<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_basic_types_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<BasicTypes<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
